name: Java CI with Gradle

on:
  pull_request:
    branches: [ "main" ]

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: create resources folder if not exists
        run: mkdir -p src/main/resources

      - name: set up application.properties
        run: echo "${{ secrets.APPLICATION }}" > src/main/resources/application.properties

      - name: Generate FCM JSON file
        env:
          FIREBASE_JSON: ${{ secrets.FIREBASE }}
        run: |
          echo ${FIREBASE_JSON} > src/main/resources/blaybus-appsolute-firebase-adminsdk.json

      - name: Generate GOOGLESHEET JSON file
        env:
          GOOGLESHEET: ${{ secrets.GOOGLESHEET }}
        run: |
          echo ${GOOGLESHEET} > src/main/resources/google-account-key.json

      - name: Verify FCM JSON file
        run: |
          ls -l src/main/resources/blaybus-appsolute-firebase-adminsdk.json

      - name: Verify GOOGLESHEET JSON file
        run: |
          ls -l src/main/resources/google-account-key.json

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: 'Gradle Test Results'
          junit_files: build/test-results/test/**/*.xml

      - name: Upload JAR to Remote Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/github_rsa
          chmod 400 ~/.ssh/github_rsa
          ssh-keyscan ${REMOTE_HOST} >> ~/.ssh/known_hosts
          scp -i ~/.ssh/github_rsa -o StrictHostKeyChecking=no build/libs/*.jar ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}